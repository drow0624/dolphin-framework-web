<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mybatis.mapper.Condition">

    <sql id="where_foreach_field_sql">
        <foreach collection="filter.fieldNames" item="fieldName">
            <if test="condField.fieldName == fieldName">
                <if test="condField.isLike">
                    ${fieldName} like #{condField.condValue}
                </if>
                <if test="condField.isEqual">
                    ${fieldName} = #{condField.condValue}
                </if>
                <if test="condField.isNotEqual">
                    ${fieldName} != #{condField.condValue}
                </if>
                <if test="condField.isRangeBegin">
                    ${fieldName}
                    <![CDATA[
                       >=
                      ]]>
                    #{condField.condValue}
                </if>
                <if test="condField.isRangeEnd">
                    ${fieldName}
                    <![CDATA[
                         <=
                      ]]>
                    #{condField.condValue}
                </if>
                <if test="condField.isCollection">
                    ${fieldName} in
                    <foreach collection="condField.condValue" index="index" item="item" open="(" separator=","
                             close=")">
                        #{item}
                    </foreach>
                </if>
            </if>
        </foreach>
    </sql>

    <sql id="where_sql">
        <if test="filter.condFields != null">
            AND
            <foreach collection="filter.condFields" item="condField" separator=" AND ">
                <include refid="com.example.mybatis.mapper.Condition.where_foreach_field_sql"></include>
                <if test='condField.fieldName == "OR_COMPLEX_FIELD"'>
                    <foreach collection="condField.condValue.fields" index="index" item="condField" open="("
                             separator=" OR " close=")">
                        <include refid="com.example.mybatis.mapper.Condition.where_foreach_field_sql"></include>
                    </foreach>
                </if>
            </foreach>
        </if>
    </sql>

    <sql id="order_sql">
        <if test="filter.sortFields != null">
            ORDER BY
            <foreach collection="filter.sortFields" item="sortField" separator=",">
                <foreach collection="filter.fieldNames" item="fieldName">
                    <if test='sortField.fieldName == fieldName'>
                        ${fieldName}
                        <if test="sortField.isAsc">
                            ASC
                        </if>
                        <if test="!sortField.isAsc">
                            DESC
                        </if>
                    </if>
                </foreach>
            </foreach>
        </if>
    </sql>

    <sql id="group_sql">
        <if test="filter.groupFields != null">
            GROUP BY
            <foreach collection="filter.groupFields" item="groupField" separator=",">
                ${groupField}
            </foreach>
        </if>
    </sql>

    <sql id="page_sql">
        <if test="filter.pager != null">
            limit #{filter.pager.count} offset #{filter.pager.offset}
        </if>
    </sql>

    <sql id="all_conditions_sql">
        <include refid="com.example.mybatis.mapper.Condition.where_sql"/>
        <include refid="com.example.mybatis.mapper.Condition.group_sql"/>
        <include refid="com.example.mybatis.mapper.Condition.order_sql"/>
        <include refid="com.example.mybatis.mapper.Condition.page_sql"/>
    </sql>


    <!--获取表的主键ID-->
    <select id="getID" parameterType="java.lang.String" resultType="java.lang.Long" flushCache="true">
        select nextval(#{sequenceName}) AS ID
    </select>

    <!--获取表里id的最大值-->
    <select id="getMaxIdInTable" parameterType="java.lang.String" resultType="java.lang.Long" flushCache="true">
        select MAX(ID) from ${tableName}
    </select>

    <!-- 重置序列的最大值-->
    <select id="resetSequenceValue" resultType="java.lang.Long" flushCache="true">
       SELECT setval(#{sequenceName}, #{newId});
    </select>


</mapper>